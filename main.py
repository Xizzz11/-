import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path
import customtkinter as ctk
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import asyncio
import threading
import logging
import pytz
import mplfinance as mpf
import matplotlib.backends.backend_pdf
import webbrowser
import io
import json
import time
import sys
import os
from tkinter import filedialog
try:
    from realtime_data import CoinGeckoAPI, fetch_realtime_data
except ImportError:
    print("–ú–æ–¥—É–ª—å realtime_data –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("crypto_analyzer_log.txt", encoding="utf-8"), logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

matplotlib.use('Agg')

class CryptoAnalyzer:
    def __init__(self, file_path: str = "", currency: str = "BTC", mode: str = "crypto"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
        self.file_path = Path(file_path) if file_path else None
        self.currency = currency.upper()
        self.mode = mode
        self.df = pd.DataFrame()
        self.output_dir = Path("crypto_results") / f"{self.mode}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.api = CoinGeckoAPI() if 'CoinGeckoAPI' in globals() else None
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω CryptoAnalyzer –≤ —Ä–µ–∂–∏–º–µ {self.mode}, –≤–∞–ª—é—Ç–∞: {self.currency}, —Ñ–∞–π–ª: {self.file_path}")

    def fetch_realtime_data(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        if not self.api:
            logger.error("API CoinGecko –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return "API CoinGecko –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
        result, df = fetch_realtime_data(self.currency, self.mode, self.api)
        self.df = df
        return result

    async def load_data_async(self, chunk_size: int = 10000) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV."""
        if not self.file_path or not self.file_path.exists():
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")
            return f"–§–∞–π–ª {self.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        try:
            if self.file_path.suffix == '.csv':
                chunks = pd.read_csv(self.file_path, chunksize=chunk_size)
                self.df = pd.concat(chunks, ignore_index=False)
                if self.mode == "crypto" and 'symbol' in self.df.columns:
                    self.df = self.df[self.df['symbol'].str.upper() == self.currency]
                    if self.df.empty:
                        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª—é—Ç—ã {self.currency}")
                        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª—é—Ç—ã {self.currency} –≤ —Ñ–∞–π–ª–µ!"
                if 'timestamp' in self.df.columns:
                    self.df['timestamp'] = pd.to_datetime(self.df['timestamp'])
                    self.df.set_index('timestamp', inplace=True)
                if self.mode == "crypto" and 'volume' not in self.df.columns:
                    self.df['volume'] = self.df['close'].mean() * 0.1
                self.df.sort_index(inplace=True, errors='ignore')
                logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.df.shape}, —Å—Ç–æ–ª–±—Ü—ã: {list(self.df.columns)}")
                return f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {self.mode}! –†–∞–∑–º–µ—Ä: {self.df.shape}\n–°—Ç–æ–ª–±—Ü—ã: {list(self.df.columns)}"
            else:
                raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç CSV")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

    def calculate_crypto_metrics(self) -> None:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
        if self.df.empty or len(self.df) < 26:
            logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫")
            return
        try:
            if self.mode == "crypto":
                self.df['log_return'] = np.log(self.df['close'] / self.df['close'].shift(1))
                self.df['volatility'] = self.df['log_return'].rolling(window=14).std() * np.sqrt(365) * 100
                self.df['sma_20'] = self.df['close'].rolling(window=20).mean()
                delta = self.df['close'].diff()
                gain = delta.where(delta > 0, 0)
                loss = -delta.where(delta < 0, 0)
                avg_gain = gain.rolling(window=14).mean()
                avg_loss = loss.rolling(window=14).mean()
                rs = avg_gain / avg_loss.replace(0, np.finfo(float).eps)
                self.df['rsi'] = 100 - (100 / (1 + rs))
                self.df['bb_middle'] = self.df['close'].rolling(window=20).mean()
                self.df['bb_std'] = self.df['close'].rolling(window=20).std()
                self.df['bb_upper'] = self.df['bb_middle'] + 2 * self.df['bb_std']
                self.df['bb_lower'] = self.df['bb_middle'] - 2 * self.df['bb_std']
                ema_12 = self.df['close'].ewm(span=12, adjust=False).mean()
                ema_26 = self.df['close'].ewm(span=26, adjust=False).mean()
                self.df['macd'] = ema_12 - ema_26
                self.df['macd_signal'] = self.df['macd'].ewm(span=9, adjust=False).mean()
                self.df['macd_hist'] = self.df['macd'] - self.df['macd_signal']
            else:  # big_data mode
                self.df['percent_change_24h'] = self.df['percent_change_24h'].astype(float)
                self.df['market_cap_rank'] = self.df['market_cap_usd'].rank(method='dense', ascending=False)
                self.df['volume_to_market_cap'] = self.df['volume_24h_usd'] / self.df['market_cap_usd']
                self.df['price_volatility'] = self.df.groupby('symbol')['price_usd'].transform(
                    lambda x: x.rolling(window=14, min_periods=1).std())
            logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ {self.mode}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {str(e)}")

    def basic_analysis(self) -> str:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö."""
        if self.df.empty:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
        try:
            self.calculate_crypto_metrics()
            output = [f"üíé –ê–Ω–∞–ª–∏–∑ –¥–ª—è {self.mode}:\n"]
            if self.mode == "crypto":
                latest_data = self.df[['close', 'volatility', 'sma_20', 'rsi']].tail(5)
                if not latest_data.empty:
                    change_percent = ((self.df['close'].iloc[-1] - self.df['close'].iloc[-2]) /
                                      self.df['close'].iloc[-2] * 100).round(2)
                    output.append(f"üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {self.df['close'].iloc[-1]:.2f} USD\n")
                    output.append(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (1 –¥–µ–Ω—å): {change_percent}% "
                                  f"{'(—Ä–æ—Å—Ç)' if change_percent > 0 else '(–ø–∞–¥–µ–Ω–∏–µ)'}\n")
                    output.append(f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (14 –¥–Ω–µ–π): {self.df['volatility'].iloc[-1]:.2f}%\n")
                    output.append(f"üìâ SMA 20 –¥–Ω–µ–π: {self.df['sma_20'].iloc[-1]:.2f} USD\n")
                    output.append(f"üìä RSI (14 –¥–Ω–µ–π): {self.df['rsi'].iloc[-1]:.2f} "
                                  f"{'(–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω)' if self.df['rsi'].iloc[-1] > 70 else '(–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)' if self.df['rsi'].iloc[-1] < 30 else '(–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω)'}\n")
                    output.append(f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:\n{latest_data.to_string()}\n")
            else:  # big_data mode
                latest_data = self.df[['symbol', 'price_usd', 'market_cap_usd', 'percent_change_24h',
                                       'volume_to_market_cap']].tail(5)
                if not latest_data.empty:
                    output.append(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤: {len(self.df)}\n")
                    output.append(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {self.df['price_usd'].mean():.2f} USD\n")
                    output.append(f"üìâ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {self.df['percent_change_24h'].mean():.2f}%\n")
                    output.append(f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:\n{latest_data.to_string()}\n")
            output.append(f"üöÄ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n{self.df.isnull().sum().to_string()}\n")
            analysis_path = self.output_dir / f'{self.mode}_analysis.txt'
            with open(analysis_path, 'w', encoding='utf-8') as f:
                f.write("\n".join(output))
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {analysis_path}")
            return "\n".join(output)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"

    def clean_data(self) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤."""
        if self.df.empty:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
        try:
            initial_count = len(self.df)
            numeric_cols = self.df.select_dtypes(include=[np.number]).columns
            self.df[numeric_cols] = self.df[numeric_cols].astype(float)
            self.df = self.df.fillna(method='ffill')
            for column in numeric_cols:
                Q1 = self.df[column].quantile(0.25)
                Q3 = self.df[column].quantile(0.75)
                IQR = Q3 - Q1
                lower_bound = Q1 - 1.5 * IQR
                upper_bound = Q3 + 1.5 * IQR
                self.df = self.df[(self.df[column] >= lower_bound) & (self.df[column] <= upper_bound)]
            new_count = len(self.df)
            if new_count == 0:
                logger.warning(f"–ù–µ—Ç —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {initial_count}")
                return f"–ù–µ—Ç —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏! –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {initial_count}"
            logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: {new_count} —Å—Ç—Ä–æ–∫")
            return f"–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã! –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {new_count}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

    def visualize_data(self, numeric_col: str = None, numeric_col2: str = None,
                       categorical_col: str = None, theme: str = 'dark',
                       chart_type: str = None) -> tuple[str, list[Path]]:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
        if self.df.empty:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!", []
        if len(self.df) < 10:
            logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 10 —Å—Ç—Ä–æ–∫)!", []
        try:
            self.calculate_crypto_metrics()
            numeric_cols = self.df.select_dtypes(include=[np.number]).columns
            categorical_cols = self.df.select_dtypes(include=['object', 'category']).columns
            numeric_col = (numeric_col if numeric_col in numeric_cols else
                           'close' if self.mode == "crypto" and 'close' in numeric_cols else
                           'price_usd' if 'price_usd' in numeric_cols else
                           numeric_cols[0] if numeric_cols.size > 0 else None)
            numeric_col2 = (numeric_col2 if numeric_col2 in numeric_cols else
                            'volume' if self.mode == "crypto" and 'volume' in numeric_cols else
                            'volume_24h_usd' if 'volume_24h_usd' in numeric_cols else
                            numeric_cols[1] if numeric_cols.size > 1 else None)
            categorical_col = (categorical_col if categorical_col in categorical_cols else
                               categorical_cols[0] if categorical_cols.size > 0 else None)

            sns.set_style("whitegrid" if theme == 'white' else "darkgrid")
            bg_color = '#F5F5F5' if theme == 'white' else '#121212'
            text_color = '#212121' if theme == 'white' else '#FFFFFF'
            plot_color = '#0288D1' if theme == 'white' else '#FF9800'
            accent_color = '#D81B60' if theme == 'white' else '#2196F3'

            image_paths: list[Path] = []
            available_charts = []
            if self.mode == "crypto" and all(col in self.df.columns for col in ['open', 'high', 'low', 'close']) and len(self.df) >= 50:
                available_charts.extend(['–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏', '–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç—ã'])
            if numeric_col:
                available_charts.extend(['–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞', '–Ø—â–∏–∫ —Å —É—Å–∞–º–∏', '–õ–∏–Ω–µ–π–Ω—ã–π', '–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π', '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å'])
            if numeric_col and numeric_col2:
                available_charts.extend(['–¢–æ—á–µ—á–Ω—ã–π', '–¶–µ–Ω–∞-–û–±—ä–µ–º'])
            if len(numeric_cols) > 1:
                available_charts.append('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è')
            if self.mode == "crypto" and 'bb_upper' in self.df.columns and len(self.df) >= 20:
                available_charts.append('–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞')
            if self.mode == "crypto" and 'macd' in self.df.columns and len(self.df) >= 26:
                available_charts.append('MACD')
            chart_types = [chart_type] if chart_type and chart_type in available_charts else available_charts

            for chart in chart_types:
                try:
                    if chart == '–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏' and self.mode == "crypto":
                        ohlcv = self.df[['open', 'high', 'low', 'close', 'volume']].tail(100)
                        if not ohlcv.empty:
                            fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                            mpf.plot(ohlcv, type='candle', style='charles' if theme == 'white' else 'nightclouds',
                                     ax=ax, volume=True, title=f'–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ {self.currency}',
                                     title_kwargs={'color': text_color, 'fontsize': 16},
                                     facecolor=bg_color, edgecolor=text_color)
                            fig.patch.set_facecolor(bg_color)
                            candle_path = self.output_dir / f'{self.currency}_candlestick.png'
                            plt.savefig(candle_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if candle_path.exists():
                                image_paths.append(candle_path)
                                logger.info(f"–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {candle_path}")

                    elif chart == '–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç—ã' and self.mode == "crypto":
                        ohlcv = self.df[['open', 'high', 'low', 'close', 'volume']].tail(100)
                        if not ohlcv.empty and 'rsi' in self.df.columns and 'macd' in self.df.columns:
                            apds = [
                                mpf.make_addplot(self.df['rsi'].tail(100), panel='lower', color=accent_color,
                                                 title='RSI', ylabel='RSI', secondary_y=False),
                                mpf.make_addplot(self.df['macd'].tail(100), panel='lower', color=plot_color,
                                                 title='MACD', ylabel='MACD'),
                                mpf.make_addplot(self.df['macd_signal'].tail(100), panel='lower', color=accent_color,
                                                 secondary_y=True, linestyle='--')
                            ]
                            fig, axes = mpf.plot(ohlcv, type='candle', style='charles' if theme == 'white' else 'nightclouds',
                                                 addplot=apds, volume=True, figscale=1.2,
                                                 title=f'–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ {self.currency}',
                                                 title_kwargs={'color': text_color, 'fontsize': 16},
                                                 facecolor=bg_color, edgecolor=text_color, returnfig=True)
                            fig.patch.set_facecolor(bg_color)
                            crypto_path = self.output_dir / f'{self.currency}_crypto_candlestick.png'
                            plt.savefig(crypto_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if crypto_path.exists():
                                image_paths.append(crypto_path)
                                logger.info(f"–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {crypto_path}")

                    elif chart == '–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞' and numeric_col:
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        data = self.df[numeric_col].dropna()
                        if not data.empty:
                            sns.histplot(data, bins=30, color=plot_color, edgecolor=accent_color, alpha=0.7)
                            ax.set_title(f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ {numeric_col}', color=text_color, fontsize=16, pad=10)
                            ax.set_xlabel(numeric_col, color=text_color, fontsize=12)
                            ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞', color=text_color, fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            fig.patch.set_facecolor(bg_color)
                            hist_path = self.output_dir / f'hist_{self.mode}_{numeric_col}.png'
                            plt.savefig(hist_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if hist_path.exists():
                                image_paths.append(hist_path)
                                logger.info(f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {hist_path}")

                    elif chart == '–Ø—â–∏–∫ —Å —É—Å–∞–º–∏' and numeric_col:
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        data = self.df[numeric_col].dropna()
                        if not data.empty:
                            sns.boxplot(y=data, color=plot_color)
                            ax.set_title(f'–Ø—â–∏–∫ —Å —É—Å–∞–º–∏ {numeric_col}', color=text_color, fontsize=16, pad=10)
                            ax.set_ylabel(numeric_col, color=text_color, fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            fig.patch.set_facecolor(bg_color)
                            box_path = self.output_dir / f'box_{self.mode}_{numeric_col}.png'
                            plt.savefig(box_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if box_path.exists():
                                image_paths.append(box_path)
                                logger.info(f"–Ø—â–∏–∫ —Å —É—Å–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {box_path}")

                    elif chart == '–õ–∏–Ω–µ–π–Ω—ã–π' and numeric_col:
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        data = self.df[numeric_col].dropna()
                        if not data.empty and not self.df.index.empty:
                            ax.plot(self.df.index, data, color=plot_color, linewidth=2, label=numeric_col)
                            ax.set_title(f'–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ {numeric_col}', color=text_color, fontsize=16, pad=10)
                            ax.set_xlabel('–î–∞—Ç–∞', color=text_color, fontsize=12)
                            ax.set_ylabel(numeric_col, color=text_color, fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            ax.legend(facecolor=bg_color, edgecolor=accent_color, labelcolor=text_color)
                            fig.patch.set_facecolor(bg_color)
                            line_path = self.output_dir / f'line_{self.mode}_{numeric_col}.png'
                            plt.savefig(line_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if line_path.exists():
                                image_paths.append(line_path)
                                logger.info(f"–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {line_path}")

                    elif chart == '–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π' and numeric_col:
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        data = self.df[numeric_col].dropna()
                        if not data.empty and not self.df.index.empty:
                            ax.fill_between(self.df.index, data, color=plot_color, alpha=0.4)
                            ax.plot(self.df.index, data, color=plot_color, linewidth=2)
                            ax.set_title(f'–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ {numeric_col}', color=text_color, fontsize=16, pad=10)
                            ax.set_xlabel('–î–∞—Ç–∞', color=text_color, fontsize=12)
                            ax.set_ylabel(numeric_col, color=text_color, fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            fig.patch.set_facecolor(bg_color)
                            area_path = self.output_dir / f'area_{self.mode}_{numeric_col}.png'
                            plt.savefig(area_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if area_path.exists():
                                image_paths.append(area_path)
                                logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {area_path}")

                    elif chart == '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å' and numeric_col:
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        data = self.df[numeric_col].dropna()
                        if not data.empty:
                            sns.kdeplot(data, color=plot_color, fill=True, alpha=0.4)
                            ax.set_title(f'–ü–ª–æ—Ç–Ω–æ—Å—Ç—å {numeric_col}', color=text_color, fontsize=16, pad=10)
                            ax.set_xlabel(numeric_col, color=text_color, fontsize=12)
                            ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', color=text_color, fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            fig.patch.set_facecolor(bg_color)
                            kde_path = self.output_dir / f'kde_{self.mode}_{numeric_col}.png'
                            plt.savefig(kde_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if kde_path.exists():
                                image_paths.append(kde_path)
                                logger.info(f"–ì—Ä–∞—Ñ–∏–∫ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {kde_path}")

                    elif chart == '–¢–æ—á–µ—á–Ω—ã–π' and numeric_col and numeric_col2:
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        data = self.df[[numeric_col, numeric_col2]].dropna()
                        if not data.empty:
                            sns.scatterplot(x=data[numeric_col], y=data[numeric_col2], color=plot_color, s=100, alpha=0.6)
                            ax.set_title(f'–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {numeric_col} vs {numeric_col2}', color=text_color, fontsize=16, pad=10)
                            ax.set_xlabel(numeric_col, color=text_color, fontsize=12)
                            ax.set_ylabel(numeric_col2, color=text_color, fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            fig.patch.set_facecolor(bg_color)
                            scatter_path = self.output_dir / f'scatter_{self.mode}_{numeric_col}_{numeric_col2}.png'
                            plt.savefig(scatter_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if scatter_path.exists():
                                image_paths.append(scatter_path)
                                logger.info(f"–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {scatter_path}")

                    elif chart == '–¶–µ–Ω–∞-–û–±—ä–µ–º' and numeric_col and numeric_col2:
                        fig, ax1 = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        ax2 = ax1.twinx()
                        data = self.df[[numeric_col, numeric_col2]].dropna()
                        if not data.empty and not self.df.index.empty:
                            ax1.plot(data.index, data[numeric_col], color=plot_color, label=numeric_col)
                            ax2.bar(data.index, data[numeric_col2], color=accent_color, alpha=0.5)
                            ax1.set_title(f'–¶–µ–Ω–∞ vs –û–±—ä–µ–º', color=text_color, fontsize=16, pad=10)
                            ax1.set_xlabel('–î–∞—Ç–∞', color=text_color, fontsize=12)
                            ax1.set_ylabel(numeric_col, color=text_color, fontsize=12)
                            ax2.set_ylabel(numeric_col2, color=accent_color, fontsize=12)
                            ax1.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            ax1.legend(facecolor=bg_color, edgecolor=accent_color, labelcolor=text_color)
                            fig.patch.set_facecolor(bg_color)
                            vp_path = self.output_dir / f'volumeprice_{self.mode}_{numeric_col}_{numeric_col2}.png'
                            plt.savefig(vp_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if vp_path.exists():
                                image_paths.append(vp_path)
                                logger.info(f"–ì—Ä–∞—Ñ–∏–∫ –¶–µ–Ω–∞-–û–±—ä–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {vp_path}")

                    elif chart == '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è' and len(numeric_cols) > 1:
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        corr_matrix = self.df[numeric_cols].corr()
                        if not corr_matrix.empty:
                            sns.heatmap(corr_matrix, annot=True, cmap='Blues' if theme == 'white' else 'YlOrBr',
                                        ax=ax, annot_kws={"size": 12, "color": text_color}, linewidths=0.5)
                            ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', color=text_color, fontsize=16, pad=10)
                            fig.patch.set_facecolor(bg_color)
                            corr_path = self.output_dir / f'correlation_{self.mode}.png'
                            plt.savefig(corr_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if corr_path.exists():
                                image_paths.append(corr_path)
                                logger.info(f"–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {corr_path}")

                    elif chart == '–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞' and self.mode == "crypto":
                        fig, ax = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        data = self.df[['close', 'bb_upper', 'bb_middle', 'bb_lower']].copy().dropna()
                        if not data.empty:
                            ax.plot(data.index, data['close'], color=plot_color, label='–¶–µ–Ω–∞')
                            ax.plot(data.index, data['bb_upper'], color=accent_color, linestyle='--', label='–í–µ—Ä—Ö')
                            ax.plot(data.index, data['bb_middle'], color='#4CAF50', linestyle='--', label='–°—Ä–µ–¥–Ω—è—è')
                            ax.plot(data.index, data['bb_lower'], color='#F44336', linestyle='--', label='–ù–∏–∑')
                            ax.fill_between(data.index, data['bb_lower'], data['bb_upper'], alpha=0.2, color=plot_color)
                            ax.set_title('–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞', color=text_color, fontsize=16, pad=10)
                            ax.set_xlabel('–î–∞—Ç–∞', color=text_color, fontsize=12)
                            ax.set_ylabel('–¶–µ–Ω–∞', color=text_color, fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            ax.legend(facecolor=bg_color, edgecolor=accent_color, labelcolor=text_color)
                            fig.patch.set_facecolor(bg_color)
                            bb_path = self.output_dir / f'bollinger_{self.currency}.png'
                            plt.savefig(bb_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if bb_path.exists():
                                image_paths.append(bb_path)
                                logger.info(f"–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {bb_path}")

                    elif chart == 'MACD' and self.mode == "crypto":
                        fig, ax1 = plt.subplots(figsize=(10, 6), facecolor=bg_color)
                        ax2 = ax1.twinx()
                        data = self.df[['close', 'macd', 'macd_signal', 'macd_hist']].copy().dropna()
                        if not data.empty:
                            ax1.plot(data.index, data['close'], color=plot_color, label='–¶–µ–Ω–∞')
                            ax2.plot(data.index, data['macd'], color=accent_color, label='MACD')
                            ax2.plot(data.index, data['macd_signal'], color='#4CAF50', linestyle='--', label='–°–∏–≥–Ω–∞–ª')
                            ax2.bar(data.index, data['macd_hist'], color=plot_color, alpha=0.5, label='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
                            ax1.set_title('MACD', color=text_color, fontsize=16, pad=10)
                            ax1.set_xlabel('–î–∞—Ç–∞', color=text_color, fontsize=12)
                            ax1.set_ylabel('–¶–µ–Ω–∞', color=text_color, fontsize=12)
                            ax2.set_ylabel('MACD', color=accent_color, fontsize=12)
                            ax1.grid(True, linestyle='--', alpha=0.3, color=accent_color)
                            ax1.legend(facecolor=bg_color, edgecolor=accent_color, labelcolor=text_color)
                            fig.patch.set_facecolor(bg_color)
                            macd_path = self.output_dir / f'macd_{self.currency}.png'
                            plt.savefig(macd_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                            plt.close(fig)
                            if macd_path.exists():
                                image_paths.append(macd_path)
                                logger.info(f"–ì—Ä–∞—Ñ–∏–∫ MACD —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {macd_path}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {chart}: {str(e)}")
                    continue

            return "–ì—Ä–∞—Ñ–∏–∫–∏ –≥–æ—Ç–æ–≤—ã –∏ –≤—ã–≥–ª—è–¥—è—Ç –æ—Ç–ª–∏—á–Ω–æ!", image_paths
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ visualize_data: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", []

    def save_to_csv(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV."""
        if self.df.empty:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
        output_path = self.output_dir / f"{self.mode}_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        try:
            self.df.to_csv(output_path, encoding="utf-8")
            logger.info(f"CSV —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
            return f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {str(e)}")
            return f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {str(e)}"

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ API-—Å–µ—Å—Å–∏–∏."""
        if self.api:
            self.api.close()
            logger.info("API –∑–∞–∫—Ä—ã—Ç")

class DataAnalyzerApp:
    def __init__(self, root: ctk.CTk):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.root = root
        self.root.title("üíé –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü—Ä–æ üíé")
        self.root.geometry("1600x900")
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")

        self.current_currency = "BTC"
        self.mode = None
        self.crypto_analyzer = None
        self.current_theme = "dark"
        self.numeric_col = None
        self.numeric_col2 = None
        self.categorical_col = None
        self.chart_type = None
        self.image_labels = []
        self.welcome_label = None
        self.progress_bar = None
        self.currency_label = None
        self.currency_menu = None
        self.action_window = None

        self.root.configure(fg_color="#121212")
        self._create_welcome_widget()

        self.nav_panel = ctk.CTkFrame(self.root, height=80, fg_color="#1E1E1E", corner_radius=10)
        self.time_label = ctk.CTkLabel(self.nav_panel, text="", font=("Arial", 18, "bold"), text_color="#2196F3")
        self.time_label.pack(side=ctk.TOP, pady=10)

        self.button_frame = ctk.CTkFrame(self.nav_panel, fg_color="#1E1E1E", corner_radius=10)
        self.button_frame.pack(side=ctk.TOP, fill=ctk.X, pady=5)

        self.text_area = ctk.CTkTextbox(self.root, height=250, font=("Arial", 16), wrap="word", fg_color="#2A2A2A",
                                        text_color="#FFFFFF", border_color="#2196F3")
        self.button_frame_2 = ctk.CTkFrame(self.root, fg_color="#121212", corner_radius=10)

        self.numeric_label = ctk.CTkLabel(self.button_frame_2, text="üî¢ –ß–∏—Å–ª–æ–≤–æ–π 1:", font=("Arial", 16, "bold"),
                                         text_color="#2196F3")
        self.numeric_label.pack(side=ctk.LEFT, padx=15)
        self.numeric_menu = ctk.CTkOptionMenu(self.button_frame_2, values=["–í—ã–±–µ—Ä–∏—Ç–µ..."], command=self.set_numeric_col,
                                             width=180, fg_color="#2196F3", button_color="#1976D2",
                                             button_hover_color="#42A5F5", text_color="#FFFFFF", font=("Arial", 14))
        self.numeric_menu.pack(side=ctk.LEFT, padx=5)

        self.numeric_label2 = ctk.CTkLabel(self.button_frame_2, text="üî¢ –ß–∏—Å–ª–æ–≤–æ–π 2:", font=("Arial", 16, "bold"),
                                          text_color="#2196F3")
        self.numeric_label2.pack(side=ctk.LEFT, padx=15)
        self.numeric_menu2 = ctk.CTkOptionMenu(self.button_frame_2, values=["–í—ã–±–µ—Ä–∏—Ç–µ..."], command=self.set_numeric_col2,
                                              width=180, fg_color="#2196F3", button_color="#1976D2",
                                              button_hover_color="#42A5F5", text_color="#FFFFFF", font=("Arial", 14))
        self.numeric_menu2.pack(side=ctk.LEFT, padx=5)

        self.categorical_label = ctk.CTkLabel(self.button_frame_2, text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è:", font=("Arial", 16, "bold"),
                                             text_color="#2196F3")
        self.categorical_label.pack(side=ctk.LEFT, padx=15)
        self.categorical_menu = ctk.CTkOptionMenu(self.button_frame_2, values=["–í—ã–±–µ—Ä–∏—Ç–µ..."],
                                                 command=self.set_categorical_col,
                                                 width=180, fg_color="#2196F3", button_color="#1976D2",
                                                 button_hover_color="#42A5F5", text_color="#FFFFFF", font=("Arial", 14))
        self.categorical_menu.pack(side=ctk.LEFT, padx=5)

        self.chart_type_label = ctk.CTkLabel(self.button_frame_2, text="üìä –ì—Ä–∞—Ñ–∏–∫:", font=("Arial", 16, "bold"),
                                            text_color="#2196F3")
        self.chart_type_label.pack(side=ctk.LEFT, padx=15)
        self.chart_type_menu = ctk.CTkOptionMenu(self.button_frame_2,
                                                values=["–í—ã–±–µ—Ä–∏—Ç–µ..."],
                                                command=self.set_chart_type, width=200,
                                                fg_color="#2196F3", button_color="#1976D2",
                                                button_hover_color="#42A5F5",
                                                text_color="#FFFFFF", font=("Arial", 14))
        self.chart_type_menu.pack(side=ctk.LEFT, padx=5)

        self.visualize_button = ctk.CTkButton(
            self.button_frame_2, text="üìà –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", command=self.open_visualization_window,
            width=200, height=40, fg_color="#2196F3", hover_color="#42A5F5",
            text_color="#FFFFFF", font=("Arial", 16, "bold")
        )
        self.visualize_button.pack(side=ctk.LEFT, padx=15)
        self.animate_button(self.visualize_button)

        self.image_frame = ctk.CTkScrollableFrame(self.root, fg_color="#121212", corner_radius=10)
        self.back_button = ctk.CTkButton(
            self.root, text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", command=self.return_to_main_screen,
            width=250, height=40, fg_color="#2196F3", hover_color="#42A5F5", text_color="#FFFFFF",
            font=("Arial", 16, "bold")
        )
        self.back_button.pack(side=ctk.BOTTOM, pady=10)
        self.back_button.pack_forget()
        logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

    def _create_welcome_widget(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞."""
        self.welcome_label = ctk.CTkLabel(
            self.root, text="üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü—Ä–æ! üíé\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞.",
            font=("Arial", 24, "bold"), text_color="#2196F3"
        )
        self.welcome_label.place(relx=0.5, rely=0.4, anchor=ctk.CENTER)

        self.crypto_button = ctk.CTkButton(
            self.root, text="üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", command=self.select_crypto_mode, width=200, height=40,
            fg_color="#2196F3", hover_color="#42A5F5", text_color="#FFFFFF", font=("Arial", 16, "bold")
        )
        self.crypto_button.place(relx=0.4, rely=0.55, anchor=ctk.CENTER)
        self.animate_button(self.crypto_button)

        self.big_data_button = ctk.CTkButton(
            self.root, text="üìà –ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ", command=self.select_big_data_mode, width=200, height=40,
            fg_color="#2196F3", hover_color="#42A5F5", text_color="#FFFFFF", font=("Arial", 16, "bold")
        )
        self.big_data_button.place(relx=0.6, rely=0.55, anchor=ctk.CENTER)
        self.animate_button(self.big_data_button)

    def select_crypto_mode(self):
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
        self.mode = "crypto"
        self.crypto_analyzer = CryptoAnalyzer(currency=self.current_currency, mode=self.mode)
        self.welcome_label.configure(text="üíé –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üíé\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        self.crypto_button.place_forget()
        self.big_data_button.place_forget()

        self.currency_label = ctk.CTkLabel(self.root, text="üí∞ –í–∞–ª—é—Ç–∞:", font=("Arial", 18, "bold"), text_color="#2196F3")
        self.currency_label.place(relx=0.5, rely=0.5, anchor=ctk.CENTER)
        self.currency_menu = ctk.CTkOptionMenu(
            self.root, values=["BTC", "ETH", "XRP", "LTC"], command=self.set_currency,
            width=150, fg_color="#2196F3", button_color="#1976D2", button_hover_color="#42A5F5",
            text_color="#FFFFFF", font=("Arial", 16)
        )
        self.currency_menu.place(relx=0.5, rely=0.55, anchor=ctk.CENTER)

        self.open_action_window()

    def select_big_data_mode(self):
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.mode = "big_data"
        self.crypto_analyzer = CryptoAnalyzer(mode=self.mode)
        self.welcome_label.configure(text="üíé –ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ üíé\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        self.crypto_button.place_forget()
        self.big_data_button.place_forget()

        self.open_action_window()

    def set_currency(self, currency: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–ª—é—Ç—ã."""
        self.current_currency = currency
        if self.mode == "crypto":
            self.crypto_analyzer = CryptoAnalyzer(currency=self.current_currency, mode=self.mode)
            self.write_message(f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {self.current_currency}")
            logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {self.current_currency}")

    def set_numeric_col(self, column: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        self.numeric_col = column if column != "–í—ã–±–µ—Ä–∏—Ç–µ..." else None
        self.update_chart_options()
        logger.info(f"–ß–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü 1: {self.numeric_col}")

    def set_numeric_col2(self, column: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        self.numeric_col2 = column if column != "–í—ã–±–µ—Ä–∏—Ç–µ..." else None
        self.update_chart_options()
        logger.info(f"–ß–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü 2: {self.numeric_col2}")

    def set_categorical_col(self, column: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        self.categorical_col = column if column != "–í—ã–±–µ—Ä–∏—Ç–µ..." else None
        self.update_chart_options()
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü: {self.categorical_col}")

    def set_chart_type(self, chart_type: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞."""
        self.chart_type = chart_type if chart_type != "–í—ã–±–µ—Ä–∏—Ç–µ..." else None
        logger.info(f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: {self.chart_type}")

    def update_chart_options(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
        if self.crypto_analyzer and not self.crypto_analyzer.df.empty:
            numeric_cols = list(self.crypto_analyzer.df.select_dtypes(include=[np.number]).columns)
            categorical_cols = list(self.crypto_analyzer.df.select_dtypes(include=['object', 'category']).columns)
            self.numeric_menu.configure(values=["–í—ã–±–µ—Ä–∏—Ç–µ..."] + numeric_cols)
            self.numeric_menu2.configure(values=["–í—ã–±–µ—Ä–∏—Ç–µ..."] + numeric_cols)
            self.categorical_menu.configure(values=["–í—ã–±–µ—Ä–∏—Ç–µ..."] + categorical_cols)

            available_charts = ["–í—ã–±–µ—Ä–∏—Ç–µ..."]
            if self.mode == "crypto" and all(col in self.crypto_analyzer.df.columns for col in ['open', 'high', 'low', 'close']) and len(self.crypto_analyzer.df) >= 50:
                available_charts.extend(['–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏', '–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç—ã'])
            if self.numeric_col:
                available_charts.extend(['–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞', '–Ø—â–∏–∫ —Å —É—Å–∞–º–∏', '–õ–∏–Ω–µ–π–Ω—ã–π', '–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π', '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å'])
            if self.numeric_col and self.numeric_col2:
                available_charts.extend(['–¢–æ—á–µ—á–Ω—ã–π', '–¶–µ–Ω–∞-–û–±—ä–µ–º'])
            if len(numeric_cols) > 1:
                available_charts.append('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è')
            if self.mode == "crypto" and 'bb_upper' in self.crypto_analyzer.df.columns and len(self.crypto_analyzer.df) >= 20:
                available_charts.append('–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞')
            if self.mode == "crypto" and 'macd' in self.crypto_analyzer.df.columns and len(self.crypto_analyzer.df) >= 26:
                available_charts.append('MACD')
            self.chart_type_menu.configure(values=available_charts)
            if self.chart_type not in available_charts:
                self.chart_type = None
                self.chart_type_menu.set("–í—ã–±–µ—Ä–∏—Ç–µ...")

    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–°–ö."""
        msk = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(msk)
        formatted_time = current_time.strftime("%H:%M:%S –ú–°–ö, %d.%m.%Y")
        self.time_label.configure(text=f"‚è∞ {formatted_time}")
        self.root.after(1000, self.update_time)

    def animate_button(self, button: ctk.CTkButton) -> None:
        """–ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏."""
        def pulse():
            if not self.root.winfo_exists():
                return
            current_color = button.cget("fg_color")
            new_color = "#1976D2" if current_color == "#2196F3" else "#2196F3"
            button.configure(fg_color=new_color)
            self.root.after(800, pulse)
        threading.Thread(target=pulse, daemon=True).start()

    def show_progress(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞."""
        if not self.progress_bar:
            self.progress_bar = ctk.CTkProgressBar(self.root, width=400, mode='indeterminate')
            self.progress_bar.place(relx=0.5, rely=0.8, anchor=ctk.CENTER)
            self.progress_bar.start()
            self.root.update()

    def hide_progress(self):
        """–°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞."""
        if self.progress_bar:
            self.progress_bar.stop()
            self.progress_bar.destroy()
            self.progress_bar = None
            self.root.update()

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã."""
        self.current_theme = "white" if self.current_theme == "dark" else "dark"
        ctk.set_appearance_mode(self.current_theme)
        bg_color = "#F5F5F5" if self.current_theme == "white" else "#121212"
        text_color = "#212121" if self.current_theme == "white" else "#FFFFFF"
        button_color = "#2196F3" if self.current_theme == "white" else "#1976D2"
        hover_color = "#42A5F5" if self.current_theme == "white" else "#42A5F5"

        self.root.configure(fg_color=bg_color)
        self.text_area.configure(fg_color="#E0E0E0" if self.current_theme == "white" else "#2A2A2A", text_color=text_color)
        self.nav_panel.configure(fg_color="#E0E0E0" if self.current_theme == "white" else "#1E1E1E")
        self.button_frame.configure(fg_color="#E0E0E0" if self.current_theme == "white" else "#1E1E1E")
        self.button_frame_2.configure(fg_color=bg_color)
        self.image_frame.configure(fg_color=bg_color)

        for widget in [self.numeric_menu, self.numeric_menu2, self.categorical_menu, self.chart_type_menu]:
            widget.configure(fg_color=button_color, button_color=hover_color, button_hover_color=button_color,
                            text_color=text_color)
        for label in [self.time_label, self.numeric_label, self.numeric_label2, self.categorical_label,
                      self.chart_type_label]:
            label.configure(text_color="#2196F3" if self.current_theme == "white" else "#42A5F5")
        if self.welcome_label:
            self.welcome_label.configure(text_color="#2196F3" if self.current_theme == "white" else "#42A5F5")
        if self.currency_label:
            self.currency_label.configure(text_color="#2196F3" if self.current_theme == "white" else "#42A5F5")
        if self.visualize_button:
            self.visualize_button.configure(fg_color=button_color, hover_color=hover_color, text_color=text_color)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –æ–∫–Ω–µ –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if self.action_window:
            self.action_window.configure(fg_color=bg_color)
            for widget in self.action_window.winfo_children():
                if isinstance(widget, ctk.CTkFrame):
                    widget.configure(fg_color=bg_color)
                elif isinstance(widget, ctk.CTkButton):
                    widget.configure(fg_color=button_color, hover_color=hover_color, text_color=text_color)

        logger.info(f"–¢–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {self.current_theme}")
        self.write_message(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'—Å–≤–µ—Ç–ª—É—é' if self.current_theme == 'white' else '—Ç–µ–º–Ω—É—é'}!")
        self.update_chart_options()

    def write_message(self, message: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ."""
        self.text_area.delete(1.0, ctk.END)
        self.text_area.insert(ctk.END, message + "\n\n")
        self.text_area.see(ctk.END)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: {message[:50]}...")

    def clear_images(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        for label in self.image_labels:
            label.destroy()
        self.image_labels = []
        logger.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")

    def load_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV."""
        file_path = filedialog.askopenfilename(filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv")])
        if file_path:
            self.crypto_analyzer.file_path = Path(file_path)
            self.show_progress()
            def run_async():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.crypto_analyzer.load_data_async(chunk_size=10000))
                loop.close()
                self.root.after(0, lambda: self._post_load_data(result))
            if self.welcome_label:
                self.welcome_label.configure(text="üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            threading.Thread(target=run_async, daemon=True).start()
        else:
            self.write_message("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞!")

    def fetch_realtime_data(self) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        self.show_progress()
        if self.welcome_label:
            self.welcome_label.configure(text=f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.mode}...")
        self.root.update()
        result = self.crypto_analyzer.fetch_realtime_data()
        self._post_load_data(result)

    def _post_load_data(self, result: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        self.hide_progress()
        if self.welcome_label:
            self.welcome_label.destroy()
            self.welcome_label = None
        if self.currency_label:
            self.currency_label.place_forget()
        if self.currency_menu:
            self.currency_menu.place_forget()

        self.nav_panel.pack(side=ctk.TOP, fill=ctk.X, padx=10, pady=10)
        self.update_time()
        self.text_area.pack(side=ctk.TOP, fill=ctk.X, padx=10, pady=10)
        self.button_frame_2.pack(side=ctk.TOP, fill=ctk.X, padx=10, pady=10)
        self.image_frame.pack(side=ctk.TOP, fill=ctk.BOTH, expand=True, padx=10, pady=10)
        self.back_button.pack(side=ctk.BOTTOM, pady=10)

        if self.crypto_analyzer and not self.crypto_analyzer.df.empty:
            self.update_chart_options()
            logger.info("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        self.write_message(result)
        self.clear_images()

    def return_to_main_screen(self) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω."""
        self.nav_panel.pack_forget()
        self.text_area.pack_forget()
        self.button_frame_2.pack_forget()
        self.image_frame.pack_forget()
        self.back_button.pack_forget()
        self.clear_images()

        if self.action_window:
            self.action_window.destroy()
            self.action_window = None

        self._create_welcome_widget()
        if self.crypto_analyzer:
            self.crypto_analyzer.close()
        self.crypto_analyzer = None
        self.mode = None
        self.numeric_col = None
        self.numeric_col2 = None
        self.categorical_col = None
        self.chart_type = None
        self.update_chart_options()
        self.write_message("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω!")
        logger.info("–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")

    def preview_data(self, num_rows: int = 10) -> None:
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö."""
        if not self.crypto_analyzer or self.crypto_analyzer.df.empty:
            self.write_message("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return
        try:
            num_rows = int(self.rows_entry.get() or num_rows)
            if num_rows > 100:
                self.write_message("–ú–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–æ–∫!")
                return
            preview = self.crypto_analyzer.df.head(num_rows).to_string()
            self.write_message(f"–ü–µ—Ä–≤—ã–µ {num_rows} —Å—Ç—Ä–æ–∫:\n{preview}")
        except ValueError:
            self.write_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫!")

    def show_analysis(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ."""
        if not self.crypto_analyzer:
            self.write_message("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        self.show_progress()
        result = self.crypto_analyzer.basic_analysis()
        self.hide_progress()
        self.write_message(result)

    def open_visualization_window(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π."""
        if not self.crypto_analyzer:
            self.write_message("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        self.show_progress()
        self.clear_images()
        result, image_paths = self.crypto_analyzer.visualize_data(
            numeric_col=self.numeric_col, numeric_col2=self.numeric_col2,
            categorical_col=self.categorical_col, theme=self.current_theme, chart_type=self.chart_type
        )
        self.hide_progress()

        vis_window = ctk.CTkToplevel(self.root)
        vis_window.title("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        vis_window.geometry("1200x800")
        vis_window.configure(fg_color="#F5F5F5" if self.current_theme == "white" else "#121212")

        vis_frame = ctk.CTkScrollableFrame(
            vis_window, fg_color="#F5F5F5" if self.current_theme == "white" else "#121212", corner_radius=10
        )
        vis_frame.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)

        message_label = ctk.CTkLabel(
            vis_frame, text=result, font=("Arial", 16, "bold"),
            text_color="#212121" if self.current_theme == "white" else "#FFFFFF"
        )
        message_label.pack(pady=10)

        image_labels = []
        for image_path in image_paths:
            try:
                image = Image.open(image_path)
                image = image.resize((int(image.width * 0.5), int(image.height * 0.5)), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(image)
                label = ctk.CTkLabel(vis_frame, image=photo, text="")
                label.image = photo
                label.pack(pady=15, padx=15)
                image_labels.append(label)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {str(e)}")
                message_label.configure(text=f"{result}\n–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {str(e)}")
        logger.info("–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ")

    def clean_data(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        if not self.crypto_analyzer:
            self.write_message("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        self.show_progress()
        result = self.crypto_analyzer.clean_data()
        self.hide_progress()
        self.write_message(result)

    def export_to_pdf(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF."""
        if not self.crypto_analyzer or self.crypto_analyzer.df.empty:
            self.write_message("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return
        self.show_progress()
        pdf_path = self.crypto_analyzer.output_dir / f'–æ—Ç—á–µ—Ç_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf'
        try:
            with matplotlib.backends.backend_pdf.PdfPages(pdf_path) as pdf:
                fig, ax = plt.subplots(figsize=(10, 8))
                ax.axis('off')
                analysis_text = self.crypto_analyzer.basic_analysis()
                ax.text(0.05, 0.95, analysis_text[:2000], fontsize=10, verticalalignment='top', wrap=True)
                pdf.savefig(fig, bbox_inches='tight')
                plt.close(fig)
                _, image_paths = self.crypto_analyzer.visualize_data(
                    numeric_col=self.numeric_col, numeric_col2=self.numeric_col2,
                    categorical_col=self.categorical_col, theme=self.current_theme, chart_type=self.chart_type
                )
                for image_path in image_paths:
                    if image_path.suffix != '.json':
                        fig, ax = plt.subplots(figsize=(10, 8))
                        image = Image.open(image_path)
                        ax.imshow(image)
                        ax.axis('off')
                        pdf.savefig(fig, bbox_inches='tight')
                        plt.close(fig)
            self.hide_progress()
            self.write_message(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_path}")
            webbrowser.open(str(pdf_path))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF: {str(e)}")
            self.hide_progress()
            self.write_message(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF: {str(e)}")

    def save_to_csv(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV."""
        if not self.crypto_analyzer:
            self.write_message("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        self.show_progress()
        result = self.crypto_analyzer.save_to_csv()
        self.hide_progress()
        self.write_message(result)

    def open_action_window(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
        if self.action_window:
            self.action_window.destroy()
        self.action_window = ctk.CTkToplevel(self.root)
        self.action_window.title("üìã –î–µ–π—Å—Ç–≤–∏—è")
        self.action_window.geometry("300x600")
        self.action_window.configure(fg_color="#F5F5F5" if self.current_theme == "white" else "#121212")

        action_frame = ctk.CTkFrame(self.action_window, fg_color="#F5F5F5" if self.current_theme == "white" else "#121212",
                                    corner_radius=10)
        action_frame.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)

        actions = [
            ("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", self.load_data),
            ("üåê –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", self.fetch_realtime_data),
            ("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä", self.preview_data),
            ("üìä –ê–Ω–∞–ª–∏–∑", self.show_analysis),
            ("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", self.clean_data),
            ("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", self.open_visualization_window),
            ("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", self.export_to_pdf),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV", self.save_to_csv),
            ("üåô –°–º–µ–Ω–∞ —Ç–µ–º—ã", self.toggle_theme),
        ]

        for i, (label, command) in enumerate(actions):
            button = ctk.CTkButton(
                action_frame, text=label, command=command,
                width=250, height=40, fg_color="#2196F3", hover_color="#42A5F5",
                text_color="#FFFFFF", font=("Arial", 16, "bold")
            )
            button.pack(pady=5)
            self.animate_button(button)

        logger.info("–û–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–æ")

def generate_sample_csv(file_path: str, currency: str, num_rows: int = 100):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ CSV-—Ñ–∞–π–ª–∞."""
    np.random.seed(42)
    start_date = datetime(2025, 6, 1)
    timestamps = [start_date + timedelta(hours=i) for i in range(num_rows)]
    base_price = {
        'BTC': 60000,
        'ETH': 3500,
        'XRP': 0.6,
        'LTC': 80
    }.get(currency, 100)
    close_prices = base_price + np.random.normal(0, base_price * 0.02, num_rows).cumsum()
    open_prices = close_prices + np.random.normal(0, base_price * 0.001, num_rows)
    high_prices = np.maximum(open_prices, close_prices) + np.random.uniform(base_price * 0.0002,
                                                                            base_price * 0.002, num_rows)
    low_prices = np.minimum(open_prices, close_prices) - np.random.uniform(base_price * 0.0002,
                                                                           base_price * 0.002, num_rows)
    volumes = np.random.uniform(100, 1000, num_rows)
    data = pd.DataFrame({
        'timestamp': timestamps,
        'open': open_prices,
        'high': high_prices,
        'low': low_prices,
        'close': close_prices,
        'volume': volumes,
        'symbol': currency
    })
    data.to_csv(file_path, index=False, encoding='utf-8')
    logger.info(f"–ü—Ä–∏–º–µ—Ä CSV –¥–ª—è {currency} —Å–æ–∑–¥–∞–Ω: {file_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    script_dir = Path(__file__).parent
    currencies = ["BTC", "ETH", "XRP", "LTC"]
    for currency in currencies:
        sample_csv = script_dir / f"{currency}_data.csv"
        if not sample_csv.exists():
            generate_sample_csv(str(sample_csv), currency, 120)
    root = ctk.CTk()
    app = DataAnalyzerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()